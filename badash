#!/usr/bin/env bash

# TODO: what things should I set here, like pipefail and lastpipe and so forth?

# get the path to the script
if [ -z "$1" ]
then
  echo "badash: Missing argument: script to execute" >&2
  exit 1
fi
script_file="$1"
shift

# TODO: help argument to describe usage

# ensure the cache dir exists
script_cache="$HOME/.badash"
mkdir -p "$script_cache"

# setup variables
current_line_num="0"

# generate a new script
generated_script="$script_cache/$(basename "$script_file")"
# first line in the file, so that bash will execute the script
echo "#!/usr/bin/env bash" > "$generated_script"

# read the script line by line
while IFS= read -r line
do
  (( current_line_num++ ))

  if [ "$current_line_num" == "1" ] && [ "${line:0:2}" == "#!" ]
  then
    # remove the shebang line
    continue

  # generate code for system_is_darwin?, system_is_linux?, etc.
  # (which is case-insensitive, so system_is_Darwin? == system_is_DARWIN? == system_is_darwin?)
  elif [[ "$line" =~ system_is_(.*)\? ]]
  then
    system="${BASH_REMATCH[1]}"
    system_lowercase="$(echo "$system" | tr '[:upper:]' '[:lower:]')"
    # for example:
    # system_is_Darwin?  -->  [ "$(uname -s | tr [:upper:] [:lower:])" == "darwin" ]
    replaced_test="${line/system_is_$system?/[ \"\$(uname -s | tr '[:upper:]' '[:lower:]')\" == \"$system_lowercase\" ]}"
    echo "$replaced_test" >> "$generated_script"

  else
    echo "$line" >> "$generated_script"

  fi
done <"$script_file"

# make sure it is executable
chmod +x "$generated_script"

# execute the generated script
"$generated_script" "$@"

# TODO: catch/identify errors and print the line that they came from
# (in the original file)
