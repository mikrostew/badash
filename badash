#!/usr/bin/env bash

# TODO: what things should I set here, like pipefail and lastpipe and so forth?

REQ_CHECK_FUNC_NAME="gen::req-check"
WAIT_COMMAND_FUNC_NAME="gen::wait-for-command"
ECHO_ERR_FUNC_NAME="gen::echo-err"

# colors
COLOR_RESET='\033[0m'
COLOR_FG_YELLOW='\033[0;33m'

########## FUNCTIONS ##########

# generate code to exit with a message if there is an error
gen-exit-on-error() {
  # arguments:
  local varname="$1" # write the generated code to this variable
  local padding="$2" # generate the code to match the padding of the surrounding code
  local exit_info="$3" # 1 or 2 strings: the exit message, and optional code to run before exiting

  if [ -z "$exit_info" ]
  then
    echo "" >&2
    echo "badash: Wrong number of arguments to @exit-on-error: expected 1 or 2, got 0" >&2
    exit 1
  fi

  # split up the strings, one per line, preserving spaces inside the quotes
  # (see https://superuser.com/a/1066541)
  local exit_options="$(eval "for arg in $exit_info; do echo \$arg; done")"
  readarray -t exit_options <<< "$exit_options"
  local num_exit_strings="${#exit_options[@]}"

  # generate any code to run before exiting
  local run_code=""
  if [ "$num_exit_strings" -eq 1 ]
  then
    run_code="# (no code to run before exit)"
  elif [ "$num_exit_strings" -eq 2 ]
  then
    # run this code before exiting
    run_code="${exit_options[1]}"
  else
    echo "" >&2
    echo "badash: Wrong number of arguments to @exit-on-error: expected 1 or 2, got $num_exit_strings" >&2
    exit 1
  fi

  # generate the code block for this
  # TODO: colored output for the error message?
  local temp_code="${padding}exit_code=\"\$?\"
${padding}if [ \"\$exit_code\" -ne 0 ]
${padding}then
${padding}  echo \"${exit_options[0]}\" >&2
${padding}  $run_code
${padding}  exit \"\$exit_code\"
${padding}fi"

  printf -v "$varname" "%s" "$temp_code"
}

# generate code to wait for a keypress
gen-wait-for-keypress() {
  # arguments:
  local varname="$1" # write the generated code to this variable
  local padding="$2" # generate the code to match the padding of the surrounding code
  local prompt_str="$3" # string to prompt the user (should be enclosed in quotes)

  # TODO: check the prompt string somehow? make sure it's a string?

  # this could use `read -p` to display the prompt, but that doesn't show up for automatic input
  # (and I want to check the output in the test)
  local temp_code="${padding}echo $prompt_str
${padding}read -n1 -s"

  printf -v "$varname" "%s" "$temp_code"
}

# add a command to the list of requirements
add-cmd-requirements() {
  local cmd_names_string="$1"
  local calling_script="$2"

  # split these on comma and/or space
  IFS=', ' read -r -a cmd_names_array <<< "$cmd_names_string"
  for cmd_name in "${cmd_names_array[@]}"
  do
    # add command to requirements for the script
    # TODO: allow version specifiers - for now just use any version
    cmd_requirements[$cmd_name]="*"
  done

  # make sure the function that checks requirements is part of imports
  import-function-lazy "$REQ_CHECK_FUNC_NAME" 'gen-requirement-check' "$calling_script"
}

# generate function to check for required commands in the script
gen-requirement-check() {
  local retvar="$1" # write the function text to this variable
  local script_name="$2"

  # arguments to this function:
  # $1: if cmd is not found, write non-zero value to this variable
  # $2: command to check for
  read -d '' func_text <<END_OF_REQ_CHECK
$REQ_CHECK_FUNC_NAME() {
  if [ ! \$(command -v \$2) ]; then
    echo "$script_name: Required command '\$2' not found" >&2
    printf -v "\$1" "1"
  fi
}
END_OF_REQ_CHECK
  # write the function text to the variable (instead of echo)
  printf -v $retvar "%s" "$func_text"
}

# import a function if it has not already been imported
import-function-lazy() {
  # arguments:
  local func_name="$1"
  local gen_func_name="$2" # command to run to import the function
  shift 2 # now "$@" captures any arguments to pass to that function

  # TODO: import from files

  # if we've already done the import, don't re-import
  if [ -n "${function_imports[$func_name]}" ]
  then
    return 0
  fi

  # use that function to write the function text to 'function_text' var
  "$gen_func_name" function_text "$@"
  function_imports[$func_name]="$function_text"
}

# generate $WAIT_COMMAND_FUNC_NAME function
gen-wait-command-function() {
  local retvar="$1" # write the function text to this variable

  # TODO: I need a global list of variables to set at the beginning

  # (no arguments to this function)
  # Note: it takes 4 backslashes here to generate 1 in the output(!?)
  read -d '' func_text <<END_OF_WAIT_FUNCTION
COLOR_FG_BOLD_GREEN='\\\\033[1;32m'
COLOR_FG_RED='\\\\033[0;31m'
COLOR_RESET='\\\\033[0m'
if [ "\$(uname -s)" == 'Darwin' ]; then DATE_CMD=gdate; else DATE_CMD=date; fi
# https://invisible-island.net/ncurses/terminfo.src.html#toc-_Specials
if [ -z "\$TERM" ] || [ "\$TERM" = "dumb" ] || [ "\$TERM" = "unknown" ]
then
  COLUMNS=80
else
  COLUMNS="\$(tput cols)"
fi
# show a busy spinner while command is running
# and only show output if there is an error
$WAIT_COMMAND_FUNC_NAME() {
  # flags
  #  --show-output (bool): always show command output
  #  --clear (bool): clear the spinner
  #  --msg (string): message to show instead of the command
  local more_args=0
  local message=""
  while [ "\$more_args" == 0 ]
  do
    if [ "\$1" == "--show-output" ]
    then
      local show_output="true"
      shift
    elif [ "\$1" == "--clear" ]
    then
      local clear="true"
      shift
    elif [ "\$1" == "--msg" ]
    then
      shift
      message="\$1"
      shift
    else
      more_args=1
    fi
  done
  # (rest of the input is the command and arguments)
  # make sure cmd is not too wide for the terminal
  # - 3 chars for spinner, 3 for ellipsis, 12 for time printout (estimated)
  local max_length=\$(( COLUMNS - 18 ))
  if [ -z "\$message" ]; then message="\$*"; fi
  local cmd_display="\$message"
  if [ "\${#message}" -gt "\$max_length" ]
  then
    cmd_display="\${message:0:\$max_length}..."
  fi
  local total_length=\$(( 3 + \${#cmd_display} ))

  local spin_chars='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏' # braille dots
  local num_chars=\${#spin_chars}

  local cmd_start_time=\$(\$DATE_CMD +%s%3N)

  # start the spinner running async, and get its PID
  (
    i=0
    while :
    do
      i=\$(( (i + 1) % num_chars ))
      printf "\\\\r \${spin_chars:\$i:1} %s" "\$cmd_display" >&2
      sleep 0.1
    done
  ) & disown
  local spinner_pid="\$!"

  # kill the spinner process for Ctrl-C, and exit this as well
  trap "kill \$spinner_pid && exit" INT TERM

  # run the command, capturing its output (both stdout and stderr)
  cmd_output="\$("\$@" 2>&1)"
  local exit_code="\$?"

  # clear the trap, and stop the spinner
  trap - INT TERM
  kill "\$spinner_pid"

  # calculate total runtime (approx)
  local cmd_stop_time=\$(\$DATE_CMD +%s%3N)
  local cmd_run_time=\$((cmd_stop_time - cmd_start_time))

  # check that the command was successful
  if [ "\$exit_code" == 0 ]
  then
    # attempt to clean up, for --clear option (best effort, this mostly works)
    if [ -n "\$clear" ]
    then
      printf "\\\\r%-\${total_length}s\\\\r" ' ' >&2
    else
      printf "\\\\r \${COLOR_FG_BOLD_GREEN}✔\${COLOR_RESET} %s (\${cmd_run_time}ms)\\\\n" "\$cmd_display" >&2
    fi
    # show output if configured
    if [ "\$show_output" == "true" ]; then echo "\$cmd_output"; fi
  else
    printf "\\\\r \${COLOR_FG_RED}✖\${COLOR_RESET} %s (\${cmd_run_time}ms)\\\\n" "\$cmd_display" >&2
    # if it fails, show the command output (in red)
    echo -e "\${COLOR_FG_RED}\$cmd_output\${COLOR_RESET}" >&2
  fi
  # pass through the exit code of the internal command, instead of dropping it
  return "\$exit_code"
}
END_OF_WAIT_FUNCTION
  # write the function text to the variable (instead of echo)
  printf -v $retvar "%s" "$func_text"
}

# generate $ECHO_ERR_FUNC_NAME function
gen-echo-err-function() {
  local retvar="$1" # write the function text to this variable

  # (no arguments to this function)
  # Note: it takes 4 backslashes here to generate 1 in the output
  read -d '' func_text <<END_OF_ECHO_ERR_FUNC
$ECHO_ERR_FUNC_NAME() {
  echo -e "\\\\033[0;31m\$*\\\\033[0m" >&2
}
END_OF_ECHO_ERR_FUNC
  # write the function text to the variable (instead of echo)
  printf -v $retvar "%s" "$func_text"
}

# code to determine the default git branch
gen-git-default-branch() {
  # arguments:
  local varname="$1" # write the generated code to this variable
  local padding="$2" # padding to use to line up with the code correctly
  local store_var="$3" # use this var to store the default branch name

  local temp_code="\
${padding}if git show-ref --verify --quiet refs/heads/main
${padding}then
${padding}  ${store_var}='main'
${padding}elif git show-ref --verify --quiet refs/heads/master
${padding}then
${padding}  ${store_var}='master'
${padding}else
${padding}  ${ECHO_ERR_FUNC_NAME} \"Error: default branch is not 'main' or 'master'\"
${padding}  exit 1
${padding}fi"

  # it uses this function, so make sure it is included
  import-function-lazy "$ECHO_ERR_FUNC_NAME" 'gen-echo-err-function'

  printf -v "$varname" "%s" "$temp_code"
}

# get full path to the input file or directory (starting from /),
# resolving any symlinks in the path
_resolve_links() {
  # symlinks are similar to files
  if [ -L "$1" ]
  then
    local target="$(readlink "$1")"
    echo "$(cd "${target%/*}" >/dev/null; pwd -P)/${target##*/}"
  # file is more complicated
  elif [ -f "$1" ]
  then
    # for absolute and relative paths, cd to parent dir and resolve symlinks
    if [[ $1 = /* ]] || [[ $1 == */* ]]
    then
      echo "$(cd "${1%/*}" >/dev/null; pwd -P)/${1##*/}"
    else
      # for bare filename, assume it's in PWD
      echo "$(pwd -P)/$1"
    fi
  # directory is easy
  elif [ -d "$1" ]
  then
    # suppress spurious output from cd, and resolve symlinks
    (cd "$1" >/dev/null; pwd -P)
  fi
}

########## EXECUTION START ##########

# get the path to the script
if [ -z "$1" ]
then
  echo "badash: Missing argument: script to execute" >&2
  exit 1
fi
script_file="$(_resolve_links "$1")"
shift

# TODO: --help argument to describe usage
# TODO: --version argument, once I release a version

# ensure the cache dir exists
script_cache="$HOME/.badash"
mkdir -p "$script_cache"

# setup variables
current_line_num="0"

# structure of the generated code
generated_header=()  # header, including the shebang
generated_body=()    # the main body of executable code

# keep track of imports and requirements
declare -A cmd_requirements
declare -A function_imports

# generated code will be written to this file
bare_script_name="${script_file##*/}"
generated_script="$script_cache/$bare_script_name"

# save the directory of the input script file for the @@SCRIPT_DIR@@ directive
script_dir="${script_file%/*}"

# first line in the file, so that bash will execute the script
generated_header+=( "#!/usr/bin/env bash" )
generated_header+=( "# Generated from '$script_file', $(date '+%Y-%m-%d %H:%M:%S')" )

# read the script line by line
while IFS= read -r line
do
  (( current_line_num++ ))

  # TODO: enable multiple @directives on a line (just change all the 'elif' to 'if'?)

  if [ "$current_line_num" == "1" ] && [ "${line:0:2}" == "#!" ]
  then
    # remove the shebang line
    continue

  # generate code for @system-is-darwin?, @system-is-linux?, etc.
  # (which is case-insensitive, so @system-is-Darwin? == @system-is-DARWIN? == @system-is-darwin?)
  elif [[ "$line" =~ @system-is-(.*)\? ]]
  then
    system="${BASH_REMATCH[1]}"
    system_lowercase="$(echo "$system" | tr '[:upper:]' '[:lower:]')"
    # for example:
    # @system-is-Darwin?  -->  [ "$(uname -s | tr [:upper:] [:lower:])" == "darwin" ]
    replaced_test="${line/@system-is-$system?/[ \"\$(uname -s | tr '[:upper:]' '[:lower:]')\" == \"$system_lowercase\" ]}"
    generated_body+=( "$replaced_test" )

  # exit with an error message if the previous command failed
  elif [[ "$line" =~ ^(\ *)@exit-on-error\ *(.*)$ ]]
  then
    padding="${BASH_REMATCH[1]}"
    exit_info_strings="${BASH_REMATCH[2]}"
    gen-exit-on-error gen_exit "$padding" "$exit_info_strings"
    generated_body+=( "$gen_exit" )

  # wait for the user to press a key
  elif [[ "$line" =~ ^(\ *)@wait-for-keypress\ (.*)$ ]]
  then
    padding="${BASH_REMATCH[1]}"
    prompt_str="${BASH_REMATCH[2]}"
    gen-wait-for-keypress gen_keypress "$padding" "$prompt_str"
    generated_body+=( "$gen_keypress" )

  # check that commands exist before using them
  elif [[ "$line" =~ ^@uses-cmds\ (.*)$ ]]
  then
    cmd_names="${BASH_REMATCH[1]}"
    add-cmd-requirements "$cmd_names" "$bare_script_name"

  # display a spinner while waiting for a command to finish
  elif [[ "$line" =~ @wait-for-command ]]
  then
    replaced_directive="${line//@wait-for-command/$WAIT_COMMAND_FUNC_NAME}"
    generated_body+=( "$replaced_directive" )
    # make sure the function that does that is part of imports
    import-function-lazy "$WAIT_COMMAND_FUNC_NAME" 'gen-wait-command-function'

  # echo in red, to stderr
  elif [[ "$line" =~ @echo-err ]]
  then
    replaced_directive="${line//@echo-err/$ECHO_ERR_FUNC_NAME}"
    generated_body+=( "$replaced_directive" )
    # make sure the function that does that is part of imports
    import-function-lazy "$ECHO_ERR_FUNC_NAME" 'gen-echo-err-function'

  # directory of the source script
  elif [[ "$line" =~ @@SCRIPT-DIR@@ ]]
  then
    replaced_directive="${line//@@SCRIPT-DIR@@/$script_dir}"
    generated_body+=( "$replaced_directive" )

  # name of the source script
  elif [[ "$line" =~ @@SCRIPT-NAME@@ ]]
  then
    replaced_directive="${line//@@SCRIPT-NAME@@/$bare_script_name}"
    generated_body+=( "$replaced_directive" )

  # name of the default git branch
  elif [[ "$line" =~ ^(\ *)@git-default-branch\ (.*)$ ]]
  then
    padding="${BASH_REMATCH[1]}"
    var_name="${BASH_REMATCH[2]}"
    gen-git-default-branch git_default_branch_code "$padding" "$var_name"
    generated_body+=( "$git_default_branch_code" )

  # TODO: @confirm_y/n
  # but, how to do default for that (specify default yes or no)
  # like @confirm_Y/n vs. @confirm_y/N ?? guess that would work...

  # TODO: @import_var

  # TODO: @import functions from other files

  # TODO: @arg and @arg_optional

  # TODO: some way to create help text for -h/--help

  # TODO: colors, like @GREEN{{some text}}

  else
    # no imports or anything to do, just add to the body
    generated_body+=( "$line" )

  fi
done <"$script_file"


# collect the imports
generated_imports=()
for function_name in "${!function_imports[@]}"
do
  generated_imports+=( "${function_imports[$function_name]}" )
done

# generate the requirement check code
cmd_reqs=()
if [ "${#cmd_requirements[@]}" -gt 0 ]
then
  # add the checks for command requirements
  for cmd_name in "${!cmd_requirements[@]}"
  do
    # platform-specific commands
    if [[ "$cmd_name" =~ (.*)/(.*) ]]
    then
      os_for_cmd="${BASH_REMATCH[1]}"
      actual_command="${BASH_REMATCH[2]}"
      # check the OS first before checking the cmd
      cmd_reqs+=( "[ \"\$(uname -s)\" == '$os_for_cmd' ] && $REQ_CHECK_FUNC_NAME _gen_cmd_check_rtn $actual_command" )
    else
      cmd_reqs+=( "$REQ_CHECK_FUNC_NAME _gen_cmd_check_rtn $cmd_name" )
    fi
  done
  # sort those so they are predictable for testing
  # (from https://stackoverflow.com/a/11789688)
  IFS=$'\n' sorted_reqs=($(sort <<<"${cmd_reqs[*]}"))
  unset IFS

  generated_reqs=( '_gen_cmd_check_rtn=0' "${sorted_reqs[@]}" 'if [ "$_gen_cmd_check_rtn" != 0 ]; then exit $_gen_cmd_check_rtn; fi' )
fi


# write all the lines to the script
echo "$(
  IFS=$'\n';
  echo "${generated_header[*]}";
  [ "${#generated_imports[@]}" -gt 0 ] && echo "${generated_imports[*]}";
  [ "${#generated_reqs[@]}" -gt 0 ] && echo "${generated_reqs[*]}";
  echo "${generated_body[*]}";
)" > "$generated_script"

# make sure it is executable
chmod +x "$generated_script"

# execute the generated script
"$generated_script" "$@"

# TODO: catch/identify errors and print the line that they came from
# (in the original file or library or here)
